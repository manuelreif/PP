maxSolved_stage_i
g012[[nai]][[1]]
g012[[nai]][[1]][min_nai:max_nai]
nai <- 4
min_nai <- minSolved_stage_i[[nai]] + 1#
        max_nai <- maxSolved_stage_i[[nai]] + 1#
        min_nai <- tail(min_nai,n=1)#
        max_nai <- tail(max_nai,n=1)#
        g0_i <- g012[[nai]][[1]][min_nai:max_nai]#
        g1_i <- g012[[nai]][[2]][min_nai:max_nai,]#
        g2_i <- g012[[nai]][[3]][min_nai:max_nai,,]#
        rf_ii <- rf_i[[nai]][min_nai:max_nai]
go_i
g0_i
g012[[nai]][[1]]
items_i[[nai]]
items_i
par_n <- c(desmat %*% par)#
       par_i <- lapply(items_l, FUN = function(x){#
          lapply(x,FUN = function(y){#
            as.numeric(par_n[y])#
          })#
        })#
      oj_i <- lapply(par_i, function(x) lapply(x, function(y) rep(1,length(y))))#
      out <- matrix(0, nrow = length(par)+1, ncol = length(par)+1)#
      g012 <- mapply(FUN = tmt:::esf_mst_sum_vector, parlist = par_i,#
                     ojlist = oj_i, order = 2, minSolved = minSolved_i, maxSolved = maxSolved_i,#
                     minSolved_design = minSolved_stage_i, maxSolved_design = maxSolved_stage_i, SIMPLIFY = FALSE)#
      ## loop over observed NA patterns      #
      for(nai in 1:nrow(mstdesign)) {#
        max_nai <- maxSolved_stage_i[[nai]] + 1#
        min_nai <- minSolved_stage_i[[nai]] + 1#
        min_nai <- tail(min_nai,n=1)#
        max_nai <- tail(max_nai,n=1)#
        g0_i <- g012[[nai]][[1]][min_nai:max_nai]#
        g1_i <- g012[[nai]][[2]][min_nai:max_nai,]#
        g2_i <- g012[[nai]][[3]][min_nai:max_nai,,]#
        rf_ii <- rf_i[[nai]][min_nai:max_nai]#
        i_i <- ncol(y_i[[nai]])#
        g1dg0 <- g1_i/g0_i#
        hessian <- matrix(0, nrow = length(par)+1, ncol = length(par)+1)#
        for (ii in seq_len(i_i)){#
         # if(length(unlist(items_l[[nai]]))>0){#
            hessian[items_i[[nai]][ii],items_i[[nai]]] <- (rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))#
         # }else{#
         #  hessian[items_i[[nai]][ii],items_i[[nai]]] <- (rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))#
         # }#
        }#
        out <- out + hessian#
      }
head(out)
tail(out)
maxSolved_stage_i
items_i
par_i
minSolved_i
maxSolved_i
items_i
nai <- 1
par_n <- c(desmat %*% par)#
       par_i <- lapply(items_l, FUN = function(x){#
          lapply(x,FUN = function(y){#
            as.numeric(par_n[y])#
          })#
        })#
      oj_i <- lapply(par_i, function(x) lapply(x, function(y) rep(1,length(y))))#
      out <- matrix(0, nrow = length(par)+1, ncol = length(par)+1)#
      g012 <- mapply(FUN = tmt:::esf_mst_sum_vector, parlist = par_i,#
                     ojlist = oj_i, order = 2, minSolved = minSolved_i, maxSolved = maxSolved_i,#
                     minSolved_design = minSolved_stage_i, maxSolved_design = maxSolved_stage_i, SIMPLIFY = FALSE)
max_nai <- maxSolved_stage_i[[nai]] + 1#
        min_nai <- minSolved_stage_i[[nai]] + 1#
        min_nai <- tail(min_nai,n=1)#
        max_nai <- tail(max_nai,n=1)#
        g0_i <- g012[[nai]][[1]][min_nai:max_nai]#
        g1_i <- g012[[nai]][[2]][min_nai:max_nai,]#
        g2_i <- g012[[nai]][[3]][min_nai:max_nai,,]#
        rf_ii <- rf_i[[nai]][min_nai:max_nai]#
        i_i <- ncol(y_i[[nai]])#
        g1dg0 <- g1_i/g0_i#
        hessian <- matrix(0, nrow = length(par)+1, ncol = length(par)+1)
ii <- 1
(rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))
hessian[items_i[[nai]][ii],items_i[[nai]]]
items_i[[nai]]
hessian[items_i[[nai]][ii],items_i[[nai]]] <- (rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))
hessian
items_i
for (ii in seq_len(i_i)){#
         # if(length(unlist(items_l[[nai]]))>0){#
            hessian[items_i[[nai]][ii],items_i[[nai]]] <- (rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))#
         # }else{#
         #  hessian[items_i[[nai]][ii],items_i[[nai]]] <- (rf_ii %*% (g2_i[,ii,]/g0_i - (g1_i[,ii]/g0_i) * g1dg0))#
         # }#
        }
hessian
tmt:::esf_mst_sum_vector
par_test <- list(log(c(1/1,1/2,1/3)),log(c(1/1,1/2,1/3,1/4)))#
#
parlist = par_test#
ojlist = lapply(par_test,function(x) rep(1,length(x)))#
order = 2#
minSolved = rep(0,length(par_test))#
maxSolved = lengths(par_test)#
minSolved_design = rep(0,length(par_test))#
maxSolved_design = cumsum(lengths(par_test))#
probs = rep(1,sum(lengths(par_test)+length(par_test)))
tmt_g012 <- esf_mst_sum_vector(#
    parlist = parlist,#
    ojlist = ojlist, #
    order = order, #
    minSolved = minSolved, #
    maxSolved = maxSolved,#
    minSolved_design = minSolved_design, #
    maxSolved_design = maxSolved_design)#
psychotools_g012 <- psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")#
round(abs(tmt_g012[[3]][,,1] - psychotools_g012[[3]][,,1]),4)
tmt_g012 <- tmt:::esf_mst_sum_vector(#
    parlist = parlist,#
    ojlist = ojlist, #
    order = order, #
    minSolved = minSolved, #
    maxSolved = maxSolved,#
    minSolved_design = minSolved_design, #
    maxSolved_design = maxSolved_design)#
psychotools_g012 <- psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")#
round(abs(tmt_g012[[3]][,,1] - psychotools_g012[[3]][,,1]),4)
ls()
mstdesign
head(fit$hessian)
head(ahessian(fit$par))
fit$hessian - ahessian(fit$par)
round(fit$hessian - ahessian(fit$par),4)
round(fit$hessian - ahessian(fit$par),6)
sqrt(diag(desmat %*% solve(fit$hessian) %*% t( desmat )))
sqrt(diag(desmat %*% solve(ahessian(fit$par)) %*% t( desmat )))
install.packages("sirt")
library(sirt)
citatoin(sirt)
citation("sirt")
switch(.Platform$OS.type,#
  "windows" = {devtools::load_all("P:/Documents/Eigene_DATEN/private_Projekte/tmt_dev");#
              },#
  "unix" =    {devtools::load_all("/Users/jansteinfeld/SynologyDrive/GIT/tmt_dev/");#
              }#
)
mstdesign <- "#
  B1 =~ paste0('i',1:20)#
  B2 =~ paste0('i',21:30)#
  B3 =~ paste0('i',31:50)#
#
  # define routing criteria#
  r1 = c(0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.25,0.2,0.15,0.1)#
  r2 = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.75,0.8,0.85,0.9)#
#
  # define path#
  p1 := B2(r1) + B1#
  p2 := B2(r2) + B3#
"#
items <- c( seq(-2,-1,length.out = 20),#
            seq(-1,1,length.out = 10),#
            seq(1,2,length.out = 20)#
            )#
names(items) <- paste0("i",1:50)#
#
data_gen <- function(x,mstdesign,items,persons){#
    out <- list()#
    mvNormal <- function(n,m1,sd1,m2,sd2){#
        y1 <- stats::rnorm(n, m1, sd1)#
		y2 <- stats::rnorm(n, m2, sd2)#
		w <- stats::rbinom(n, 1, (2/3))#
		# out <- c(y1[w==1],y2[w==0])#
        out <- w * y1 + (1-w) * y2 #
		return(out)	#
    }#
    for(i in seq(x)){#
        cat("\r",paste0("Durchgang: "), formatC(i,flag=0,width=nchar(x)))#
        flush.console()#
        theta <- mvNormal(n = persons,#
                        m1 = -1.5, #
                        sd1 = 0.5,#
                        m2 = 1,#
                        sd2 = 1)#
        out[[i]] <- tmt_sim(mstdesign, items = items, persons = theta)#
    }#
    out#
}
m02_generalizedMST_2020 <- data_gen(x = 1000,#
                mstdesign = mstdesign,#
                items = items,#
                persons = 5000)#
saveRDS(m02_generalizedMST_2020,file = "/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2019_generalized_MST/Simulation/data/m02_generalizedMST_2020.rds")
rm(m02_generalizedMST_2020);gc();gc()#
# m03 =  2,000#
m03_generalizedMST_2020 <- data_gen(x = 1000,#
                mstdesign = mstdesign,#
                items = items,#
                persons = 2000)#
saveRDS(m03_generalizedMST_2020,file = "/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2019_generalized_MST/Simulation/data/m03_generalizedMST_2020.rds")#
rm(m03_generalizedMST_2020);gc();gc()#
# m04 =  1,000#
m04_generalizedMST_2020 <- data_gen(x = 1000,#
                mstdesign = mstdesign,#
                items = items,#
                persons = 1000)#
saveRDS(m04_generalizedMST_2020,file = "/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2019_generalized_MST/Simulation/data/m04_generalizedMST_2020.rds")#
rm(m04_generalizedMST_2020);gc();gc()#
# m05 =    500#
m05_generalizedMST_2020 <- data_gen(x = 1000,#
                mstdesign = mstdesign,#
                items = items,#
                persons = 500)#
saveRDS(m05_generalizedMST_2020,file = "/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2019_generalized_MST/Simulation/data/m05_generalizedMST_2020.rds")#
rm(m05_generalizedMST_2020);gc();gc()#
# m06 =    250#
m06_generalizedMST_2020 <- data_gen(x = 1000,#
                mstdesign = mstdesign,#
                items = items,#
                persons = 250)#
saveRDS(m06_generalizedMST_2020,file = "/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2019_generalized_MST/Simulation/data/m06_generalizedMST_2020.rds")#
rm(m06_generalizedMST_2020);gc();gc()
solvemat <- function(nr, nc){#
	set.seed(2907)#
	m1 <- matrix(runif(nr*nc), nrow = nr, ncol = nc)#
	m2 <- t(m1)%*%m1#
	m3 <- solve(m2)#
}#
system.time(replicate(2, solvemat(10000, 5000)))
?system.time
install.packages("benchmarkme")
res = benchmark_std(runs = 1)
library(benchmarkme)
res = benchmark_std(runs = 1)
plot(res)
get_ram()
get_cpu()
get_byte_compiler()
et_platform_info()
get_platform_info()
library(tmt)
esf_mst_sum_vector(#
  parlist = list(rep(log(1),3),rep(log(1),3)), #
  ojlist = list(rep(1,3),rep(1,3)), #
  minSolved = c(1,1),#
  minSolved_design = c(1,2),#
  maxSolved = c(3,3),#
  maxSolved_design = c(3,6),#
  order = 2)
tmt:::esf_mst_sum_vector(#
  parlist = list(rep(log(1),3),rep(log(1),3)), #
  ojlist = list(rep(1,3),rep(1,3)), #
  minSolved = c(1,1),#
  minSolved_design = c(1,2),#
  maxSolved = c(3,3),#
  maxSolved_design = c(3,6),#
  order = 2)
tmt:::esf_mst_sum_vector(#
  parlist = list(rep(log(1),3),rep(log(1),3),rep(log(1),3)), #
  ojlist = list(rep(1,3),rep(1,3),rep(1,3)), #
  minSolved = c(1,0,1),#
  minSolved_design = c(1,1,2),#
  maxSolved = c(3,3,3),#
  maxSolved_design = c(3,6,9),#
  order = 1)[[2]]
tmt:::esf_mst_sum_vector(#
  parlist = list(rep(log(1),3),rep(log(1),3),rep(log(1),3)), #
  ojlist = list(rep(1,3),rep(1,3),rep(1,3)), #
  minSolved = c(1,0,1),#
  minSolved_design = c(1,1,2),#
  maxSolved = c(3,3,3),#
  maxSolved_design = c(3,6,9),#
  order = 1)
switch(.Platform$OS.type,#
  "windows" = {devtools::load_all("P:/Documents/Eigene_DATEN/private_Projekte/tmt_dev");#
              },#
  "unix" =    {devtools::load_all("/Users/jansteinfeld/SynologyDrive/GIT/tmt_dev/");#
              }#
)
mstdesign <- "#
  B1 =~ paste0('i',1:20)#
  B2 =~ paste0('i',21:30)#
  B3 =~ paste0('i',31:50)#
#
  # define path#
  p1 := B2(0, 5) + B1#
  p2 := B2(6,10) + B3#
"#
items <- c( seq(-2,-1,length.out = 20),#
            seq(-1,1,length.out = 10),#
            seq(1,2,length.out = 20)#
            )#
names(items) <- paste0("i",1:50)#
#
dat <- tmt_sim(mstdesign, items = items, persons = 10000, seed = 1111)#
saveRDS(dat,file="dat_tmp.rds")#
tmt_rm(dat, optimization="nlminb")#
tmt_rm(dat, optimization="nlminb")$betapar#
tmt_rm(dat, optimization="optim")$betapar
switch(.Platform$OS.type,#
  "windows" = {devtools::load_all("P:/Documents/Eigene_DATEN/private_Projekte/tmt_dev");#
              },#
  "unix" =    {devtools::load_all("/Users/jansteinfeld/SynologyDrive/GIT/tmt_dev/");#
              }#
)
mstdesign <- "#
  B1 =~ paste0('i',1:20)#
  B2 =~ paste0('i',21:30)#
  B3 =~ paste0('i',31:50)#
#
  # define path#
  p1 := B2(0, 5) + B1#
  p2 := B2(6,10) + B3#
"#
items <- c( seq(-2,-1,length.out = 20),#
            seq(-1,1,length.out = 10),#
            seq(1,2,length.out = 20)#
            )#
names(items) <- paste0("i",1:50)#
#
dat <- tmt_sim(mstdesign, items = items, persons = 10000, seed = 1111)#
saveRDS(dat,file="dat_tmp.rds")#
tmt_rm(dat, optimization="nlminb")#
tmt_rm(dat, optimization="nlminb")$betapar#
tmt_rm(dat, optimization="optim")$betapar
tmt_rm(dat, optimization="nlminb")$se.beta#
tmt_rm(dat, optimization="optim")$se.beta
y1 <- stats::rnorm(n, 0, 1)#
		y2 <- stats::rnorm(n, d, 1)#
		y1 <- (1 - pi) * y1
n = 1000
d = 0.3
pi = 1
y1 <- stats::rnorm(n, 0, 1)#
		y2 <- stats::rnorm(n, d, 1)#
		y1 <- (1 - pi) * y1
plot(density(y1))
pi = 0.1
y1 <- stats::rnorm(n, 0, 1)#
		y2 <- stats::rnorm(n, d, 1)#
		y1 <- (1 - pi) * y1
plot(density(y1))
pi = 0.3
y1 <- stats::rnorm(n, 0, 1)#
		y2 <- stats::rnorm(n, d, 1)#
		y1 <- (1 - pi) * y1
plot(density(y1))
y1
?base::scale
tinytex::pdflatex("~/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2020_distributions_MST/MST_distributions.tex")
log(-0.5)
log(0.5)
exp(-0.5)
exp(0.5)
# your code goes here#
library(OPDOE)#
#
size.t.test(#
delta       = 10,        # Einheiten der Daten (mu1 - mu2)#
sd          = 10,#
sig.level   = 0.05,           #
power       = 0.8,           # power = 1-beta#
type        = "two.sample",#
alternative = "one.sided"#
)
install.packages("OPDOE")
# your code goes here#
library(OPDOE)#
#
size.t.test(#
delta       = 10,        # Einheiten der Daten (mu1 - mu2)#
sd          = 10,#
sig.level   = 0.05,           #
power       = 0.8,           # power = 1-beta#
type        = "two.sample",#
alternative = "one.sided"#
)
# your code goes here#
library(OPDOE)#
#
size.t.test(#
delta       = 6.67,        # Einheiten der Daten (mu1 - mu2)#
sd          = 10,#
sig.level   = 0.05,           #
power       = 0.95,           # power = 1-beta#
type        = "two.sample",#
alternative = "one.sided"#
)
citation(dexterMST)
citation("dexterMST")
citation("tmt")
1/(2^2/3)
1/(2^2/3)*2^2/3
2*2^1/2
2*2^(1/2)
2*2^(1/2) / 1^(1/2)
1/(2^(2/3))
1/(2^(2/3))*2^(2/3)
2*sqrt(2/1)
3+(12/1)
175
1/5
3/5
?rnorm
Metrics::bias
?Metrics::bias
install.packages("SimDesign")
SimDesign::RMSE
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6) #
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2) #
Metrics::bias(actual, predicted)
SimDesign::bias
SimDesign::bias()
SimDesign::bias(estimate=predicted,parameter=)
SimDesign::bias(estimate=predicted,parameter=actual)
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6) #
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2) #
Metrics::bias(actual, predicted)
==rmse
??rmse
install.packages(c(‚tidyverse‘))
install.packages(c(‘tidyverse‘))
install.packages(c(“tidyverse“))
# library#
require(foreign)#
require(eRm)#
require(psych)#
require(TAM)
dat <- read.spss("~/SynologyDrive/Lehre/Workshop/Test_und_Fragebogenkonstruktion/Daten/Daten_Workshop/IntelligenceWichertEtal2012.sav",to.data.frame=T)#
colnames(dat)#
head(dat)#
# Fälle ausschließen, die kein einziges Item beantwortet haben#
dat.1 <- subset(dat,rowSums(is.na(dat[,5:40]))<36)
head(dat)
describe(dat.1[,5:40])
rasch.m1 <- RM(dat.1[,5:39],se=T)
summary(rasch.m1)
layout(1:2)#
plot(1:35,colMeans(dat.1[,5:39]),pch=19,#
     xlab="Items 1-35",ylab="Itemmittelwerte",#
     main="Itemmittelwerte")#
plot(1:35,-1*rasch.m1$betapar,pch=19,#
     xlab="Items 1-35",ylab="Itemschwierigkeiten",#
     main="Itemschweirigkeitsparameter (Rasch)")
ls()
LRtest(rasch.m1)
installr::updateR()
install.packages("installr")
remotes::install_github('talgalili/installr')
devtools::install_github("AndreaCirilloAC/updateR")
updateR(auto = TRUE, .Rprofile = NULL)
updateR::updateR(auto = TRUE, .Rprofile = NULL)
updateR::updateR(auto = TRUE, .Rprofile = NULL,admin_password="need")
?updateR
updateR::updateR(auto = TRUE, .Rprofile = NULL)
admin_password <- "need"
updateR::updateR(auto = TRUE, .Rprofile = NULL)
updateR::updateR
admin_password <- "need"
username <- system("whoami", intern = TRUE)
command <- paste0("echo '", admin_password, "' | sudo -S -l")
command
needed_packages <- installed.packages() %>% as.data.frame() %>% #
        select(Package) %>% as.vector()#
    needed_packages <- paste(unlist(needed_packages))#
    save(needed_packages, file = "/tmp/needed_packages.RData")#
    latest <- latest_r_version()
library(updateR)
out <- system(command, intern = TRUE)
need
needed_packages <- installed.packages() %>% as.data.frame() %>% #
        select(Package) %>% as.vector()#
    needed_packages <- paste(unlist(needed_packages))#
    save(needed_packages, file = "/tmp/needed_packages.RData")
installed.packages() %>% as.data.frame() %>% #
        select(Package) %>% as.vector()
library(tidyverse)
needed_packages <- installed.packages() %>% as.data.frame() %>% #
        select(Package) %>% as.vector()#
    needed_packages <- paste(unlist(needed_packages))#
    save(needed_packages, file = "/tmp/needed_packages.RData")#
    latest <- latest_r_version()
latest <- updateR::latest_r_version()
latest_r_version
installing <- list_packages()
latest <- updateR:::latest_r_version()
updateR:::check_compactability(status = latest)#
    installing <- updateR:::list_packages()#
    folderpath <- sprintf("/Users/%s/Downloads/", system2("whoami", #
        stdout = TRUE))#
    pkgfile <- regmatches(latest$url, regexpr("R.*$", latest$url))#
    fullpath <- sprintf("%s%s", folderpath, pkgfile)
latest <- updateR:::latest_r_version()
updateR:::check_compactability(status = latest)#
    installing <- updateR:::list_packages()#
    folderpath <- sprintf("/Users/%s/Downloads/", system2("whoami", #
        stdout = TRUE))#
    pkgfile <- regmatches(latest$url, regexpr("R.*$", latest$url))#
    fullpath <- sprintf("%s%s", folderpath, pkgfile)
download.file(latest$url, fullpath)
message(paste0("Installing R-", latest$latest, "...please wait"))#
    command <- paste0("echo '", admin_password, "' | sudo -S installer -pkg ", #
        "'", fullpath, "'", " -target /")#
    system(command, ignore.stdout = TRUE)
need
arg <- paste0("--check-signature ", fullpath)
arg
latest
needed_packages
updateR:::restore_packages(status = latest)#
r
load(file = "/tmp/needed_packages.RData")
ls()
?install.packages
install.packages(needed_packages,dependencies=TRUE,quiet=TRUE,Ncpus=4)
install.packages(needed_packages,dependencies=TRUE,quiet=TRUE,Ncpus=4,ask=FALSE)
options(install.packages.compile.from.source = "always")#
install.packages(needed_packages,dependencies=TRUE,quiet=TRUE,Ncpus=4,verbose=TRUE)
options(install.packages.compile.from.source = "always")#
install.packages(needed_packages,dependencies=TRUE,quiet=TRUE,Ncpus=4)
library(tidyverse)
library(sirt)
update.packages(ask=FALSE)
library(sirt)
library(tmt)
library(TAM)
library(PP)
?stats::fitted
# muss nun die Itemparameter (nicht scaled) überprüfen#
all_identical <- function(x) {#
  if (length(x) == 1L) {#
    warning("'x' has a length of only 1")#
    return(TRUE)#
  } else if (length(x) == 0L) {#
    warning("'x' has a length of 0")#
    return(logical(0))#
  } else {#
    TF <- vapply(1:(length(x)-1),#
                 function(n) identical(x[[n]], x[[n+1]]),#
                 logical(1))#
    if (all(TF)) TRUE else FALSE#
  }#
}
dateneinlesen <- function(path){#
	datenliste <- list.files(path, recursive = TRUE, pattern = ".out",full.names=TRUE)#
	out <- list()#
# Namen bestimmen#
#
	for(n in datenliste){#
		cat("\r Datensatz: ",n)#
		flush.console()#
		out_tmp <- readRDS(n)#
		nam <- gsub("/","-",n)#
    nam <- gsub("__dat_itpar.out","",nam)#
		out[[nam]] <- out_tmp#
	}#
	return(out)#
}
dat <- dateneinlesen("/Users/jansteinfeld/SynologyDrive/Publikation_Präsentation_Poster/Papiere/2020_distributions_MST/daten/singlestage")
length(dat)
apply(dat[[1]],2,all_identical)
i <- 1
lapply(dat[[i]],FUN = function(x){#
		apply(x,2,all_identical)#
	})
out <- list()#
for(i in seq_along(dat)){#
	out[[i]] <- lapply(dat[[i]],FUN = function(x){#
		apply(x,2,all_identical)#
	})#
}
cat("Check für Bedingung: ",i,"\r")
nichtschaetzbar <- function(x) unlist(.mapply(function(...) which(c(...)==TRUE), x, NULL))#
nichtschaetzbar(out2[[5]])#
out_ne <- lapply(out,nichtschaetzbar)#
#
which(lengths(out_ne) < 1000 & lengths(out_ne) > 0)
which(lengths(out_ne) < 1000 & lengths(out_ne) > 0)
out_ne
dat[[1]][[1]]
round(rowSums(dat[[1]][[1]]),4)
round(colSums(dat[[1]][[1]]),4)
size_n.one_way.model_1(alpha = 0.05, beta = 0.2, delta =0.67, a = 4,cases = "maximin")
library(opdoe)
install.packages("opdoe")
library(OPDOE)
size_n.one_way.model_1(alpha = 0.05, beta = 0.2, delta =0.67, a = 4,cases = "maximin")
install.packages("OPDOE", repos = "https://packagemanager.rstudio.com/cran/latest")
chi_dist <- function(n,df) {#
		X <- rchisq(n, df)#
		out <- c(base::scale(X))#
    return(out)#
	}
?scale
set.seed(1111)
test1 <- chi_dist(1000,1)
set.seed(1111)
test2 <- rchisq(1000,1)
mean(test1)
mean(test2)
?scale
sd(Test1)
sd(test1)
sd(test2)
sd(scale(test2,scale=FALSE))
sd(scale(test2,scale=TRUE))
mvNormal <- function(n,m1,sd1,m2,sd2){#
        y1 <- stats::rnorm(n, m1, sd1)#
		y2 <- stats::rnorm(n, m2, sd2)#
		w <- stats::rbinom(n, 1, (2/3))#
		# out <- c(y1[w==1],y2[w==0])#
        out <- w * y1 + (1-w) * y2 #
		return(out)	#
    }#
    for(i in seq(x)){#
        cat("\r",paste0("Durchgang: "), formatC(i,flag=0,width=nchar(x)))#
        flush.console()#
        theta <- mvNormal(n = persons,#
                        m1 = -1.5, #
                        sd1 = 0.5,#
                        m2 = 1,#
                        sd2 = 1)
mvNormal <- function(n,m1,sd1,m2,sd2){#
        y1 <- stats::rnorm(n, m1, sd1)#
		y2 <- stats::rnorm(n, m2, sd2)#
		w <- stats::rbinom(n, 1, (2/3))#
		# out <- c(y1[w==1],y2[w==0])#
        out <- w * y1 + (1-w) * y2 #
		return(out)	#
    }
theta <- mvNormal(n = persons,#
                        m1 = -1.5, #
                        sd1 = 0.5,#
                        m2 = 1,#
                        sd2 = 1)
persons =1000
theta <- mvNormal(n = persons,#
                        m1 = -1.5, #
                        sd1 = 0.5,#
                        m2 = 1,#
                        sd2 = 1)
mean(theta)
sd(theta)
library(sirt)
Sys.getenv()
Sys.getenv
.Internal(Sys.getenv(character(), "")
.Internal(Sys.getenv())
.Internal(Sys.getenv(),"")
.Internal(Sys.getenv(character(), "")
)
.Internal(Sys.getenv(character(), ""))
PP::sim_4pl
setwd("/Users/jansteinfeld/SynologyDrive/GIT/PP")
Rcpp::compileAttributes()
pkgbuild::compile_dll()
roxygen2::roxygenise()
roxygen2::roxygenise()
getwd()
devtools::build()
